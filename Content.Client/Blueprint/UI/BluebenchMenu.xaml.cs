using System.Linq;
using Content.Shared.Blueprint;
using Content.Shared.Stacks;
using Content.Shared.Tag;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Blueprint.UI;

[GenerateTypedNameReferences]
public sealed partial class BluebenchMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public Action<string>? OnTechnologyProjectStart;
    private readonly SpriteSystem _spriteSystem;
    public BluebenchResearchPrototype? ActiveResearchProto;
    public Dictionary<ProtoId<StackPrototype>, int> MaterialProgress = new();
    public Dictionary<string, int> ComponentProgress = new();
    public HashSet<BluebenchResearchPrototype> ResearchedPrototypes = [];
    public Dictionary<ProtoId<TagPrototype>, int> TagProgress = new();
    public int BlueprintCount = 0;

    public BluebenchMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entityManager.System<SpriteSystem>();
        Tabs.SetTabTitle(0, _loc.GetString("bluebench-available-tab"));
        Tabs.SetTabTitle(1, _loc.GetString("bluebench-completed-tab"));
    }

    public void UpdateResearchEntries(HashSet<ProtoId<BluebenchResearchPrototype>> researchEntries)
    {
        ResearchList.RemoveAllChildren();
        ResearchedList.RemoveAllChildren();
        foreach (var protoId in  researchEntries)
        {
            if (!_prototypeManager.TryIndex(protoId, out var proto))
                continue;

            var message = GetRequirements(proto);
            var enabled = ActiveResearchProto == null && BlueprintCount != 0;
            var item = new BluebenchResearchEntry(proto.Name!,
                message,
                _spriteSystem.Frame0(proto.Icon!),
                proto.ID,
                enabled,
                true);

            item.OnTechnologyProjectStart = OnTechnologyProjectStart;

            ResearchList.AddChild(item);
        }

        foreach (var item in from entry in ResearchedPrototypes
                 let message = GetRequirements(entry)
                 let enabled = BlueprintCount != 0
                 select new BluebenchResearchEntry(entry.Name!,
                     message,
                     _spriteSystem.Frame0(entry.Icon!),
                     entry.ID,
                     enabled,
                     false))
        {
            item.OnTechnologyProjectStart = OnTechnologyProjectStart;

            ResearchedList.AddChild(item);
        }

        BlueprintText.Text = _loc.GetString("bluebench-blueprints-text", ("blueprintCount", BlueprintCount));
    }

    public void UpdateRequiredComponents()
    {
        ActiveResearch.Text = _loc.GetString("bluebench-active-project") + " " +
                              (ActiveResearchProto == null ? "N/A" : ActiveResearchProto.Name);
        if (ActiveResearchProto is null)
            return;

        var prototypeManager = IoCManager.Resolve<IPrototypeManager>();

        Requirements.RemoveAllChildren();
        foreach (var (key, value) in MaterialProgress)
        {
            if (value == 0)
                continue;

            if (!prototypeManager.TryIndex(key, out var stackPrototype))
                continue;

            Texture? frame = null;
            if (stackPrototype.Icon is not null)
                _spriteSystem.GetFrame(stackPrototype.Icon, TimeSpan.Zero, false);

            Requirements.AddChild(new BluebenchMaterialRequirement(frame, $"{value}x {Loc.GetString(stackPrototype.Name)}"));
        }

        foreach (var (key, value) in TagProgress)
        {
            if (value == 0)
                continue;

            if (!prototypeManager.TryIndex(key, out var tagPrototype))
                continue;

            Requirements.AddChild(new BluebenchMaterialRequirement(null, $"{value}x {tagPrototype.ID.ToLower()}"));
        }

        foreach (var (key, value) in ComponentProgress)
        {
            if (value == 0)
                continue;
            Requirements.AddChild(
                new BluebenchMaterialRequirement(null,
                    $"{value}x {key}")); // should add some simple enough way to explain "an item containing this component", idc for now
        }
    }

    private FormattedMessage GetRequirements(BluebenchResearchPrototype entry)
    {
        var message = new FormattedMessage();
        message.AddMarkupOrThrow(entry.Description!);
        message.PushNewline();

        foreach (var (key, value) in entry.StackRequirements)
        {
            message.PushNewline();
            if (_prototypeManager.Resolve(key, out var prototype))
                message.AddMarkupOrThrow($"{value}x {Loc.GetString(prototype.Name)}");
        }

        foreach (var (key, value) in entry.TagRequirements)
        {
            message.PushNewline();
            message.AddMarkupOrThrow($"{value.Amount}x {key.Id.ToLower()}"); // ToLower for consistency with regular prototype names
        }

        foreach (var (key, value) in entry.ComponentRequirements)
        {
            message.PushNewline();
            if (_prototypeManager.Resolve(key, out var prototype))
                message.AddMarkupOrThrow($"{value.Amount}x {prototype.Name}");
        }

        return message;
    }
}
